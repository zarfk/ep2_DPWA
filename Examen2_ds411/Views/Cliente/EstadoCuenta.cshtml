
@{
    ViewBag.Title = "EstadoCuenta";
    Layout = "~/Views/Shared/_Layout.cshtml";

    if (ViewBag.msjT != null)
    {
        switch (ViewBag.msjT)
        {
            case "retiro":
                <script>alert("Retiro realizado con exito")</script>
                break;
            case "deposito":
                <script>alert("Deposito realizado con exito")</script>
                break;
            case "SaldoIn":
                <script>alert("Saldo insuficiente para realizar retiro")</script>
                break;
            case "limiteDiario":
                <script>alert("Ha excedido el límite de 10 transacciones por día.")</script>
                break;
            case "Error":
                <script>alert("Error: La cuenta especificada no pertenece a este cliente o no existe.")</script>
                break;
            case "ErrorData":
                <script>alert("Ocurrio un error")</script>
                break;
        }
    }
}
@model Examen2_ds411.Models.transacciones

<h2>EstadoCuenta</h2>

<script>
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GetEstadoCuenta", "Cliente")',
            dataType: "JSON",
            type: "GET"
        }).done(function (resultado) {
            var cliente = resultado.resultado;
            $("#txtNombre").text(cliente.nombreCliente);
            $("#txtNIT").text(cliente.nit);

            var cuentas = cliente.Cuentas;
            var contenedor = $("#contenedorCuentas");
            contenedor.empty();

            cuentas.forEach(function (cuenta, index) {
                var card = `
                <div class=" mb-2 text-white">
                    <div class="card shadow-sm bg-dark">
                        <div class="card-header text-white">
                            Cuenta: ${cuenta.numeroCuenta}
                        </div>
                        <div class="card-body">
                            <h4 class="card-title "">$${cuenta.saldo.toFixed(2)}</h4>
                            <sub>Saldo Disponible</sub><br><br>

                            <button class="btn btn-success btn-sm" onclick="location.href='@Url.Action("TransaccionCliente", "Cliente")?tipo=retiro&n=${cuenta.numeroCuenta}'" >Hacer Retiro</button>

                            <button class="btn btn-success btn-sm" onclick="location.href='@Url.Action("TransaccionCliente", "Cliente")?tipo=deposito&n=${cuenta.numeroCuenta}'" >Hacer Deposito</button>

                            <button class="btn btn-info btn-sm ver_movimientos" data-index="${index}">Ver movimientos</button>
                        </div>
                    </div>
                </div>
                `;
                contenedor.append(card);
            });

            // Evento para mostrar transacciones de cada cuenta
            $(".ver_movimientos").click(function () {
                var index = $(this).data("index");
                var transacciones = cuentas[index].Transacciones;
                var ncta = cuentas[index].numeroCuenta;
                mostrarTransacciones(transacciones, ncta);
            });
        }).fail(function () {
            alert("Error al cargar estado de cuenta. error");
        });
    });

    function mostrarTransacciones(transacciones, numeroCuenta) {
        var contenedor = $("#contenedorTransacciones");
        contenedor.empty();

        if (transacciones.length === 0) {
            contenedor.append(`<h5>No hay movimientos para la cuenta ${numeroCuenta}</h5>`);
            return;
        }

        contenedor.append(`<h5>Movimientos de la cuenta ${numeroCuenta}</h5>`);


        transacciones.forEach(function (t) {

            var fechaRecibida = t.fecha;
            var fechaObjeto = null;

            if (fechaRecibida && typeof fechaRecibida === 'string' && fechaRecibida.startsWith('/Date(')) {
                var milliseconds = parseInt(fechaRecibida.substr(6));
                if (!isNaN(milliseconds)) {
                    fechaObjeto = new Date(milliseconds);
                }
            }

            var fechaFormateada = 'Fecha inválida';

            if (fechaObjeto && !isNaN(fechaObjeto.getTime())) {

                var opcionesFecha = { year: 'numeric', month: '2-digit', day: '2-digit' };

                var opcionesHora = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };

                var fechaStr = fechaObjeto.toLocaleDateString(undefined, opcionesFecha);
                var horaStr = fechaObjeto.toLocaleTimeString(undefined, opcionesHora);

                fechaFormateada = `${fechaStr} ${horaStr}`;

                if (!t.fecha) {
                    fechaFormateada = 'Fecha no registrada';
                }

            } else if (!t.fecha) {
                fechaFormateada = 'Fecha no registrada';
            }

            var tarjeta = `
            <div class="card mb-2">
                <div class="card-body">
                    <h6 class="text-${t.tipo === 'deposito' ? 'success' : 'danger'}">${t.tipo.toUpperCase()}</h6>
                    <p class="mb-1">Monto: $${t.monto.toFixed(2)}</p>
                    <p class="mb-0"><small>Fecha : ${fechaFormateada}</small></p>
                </div>
            </div>
            `;
            contenedor.append(tarjeta);
        });
    }
</script>
<br />
<div id="infoCliente" class="mb-4">
    <h4 id="txtNombre"></h4>
    <p><strong>NIT:</strong> <span id="txtNIT"></span></p>
</div>


<div id="contenedorCuentas" class="row"></div>

<div id="contenedorTransacciones" class="mt-4"></div>
