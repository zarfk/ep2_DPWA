@{
    ViewBag.Title = "Gestión de Clientes y Cuentas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .column-divider {
        padding-left: 15px;
        padding-right: 15px;
    }

    .table-actions a, .table-actions button {
        margin-right: 5px;
    }

    .sticky-header {
        position: sticky;
        top: 10px;
        background-color: white;
        z-index: 10;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }
</style>

<h2>@ViewBag.Title</h2>
<hr />

<div class="container-fluid mt-4">
    <div class="row">

        <!-- Columna Clientes -->
        <div class="col-md-6 column-divider border-end">
        
            <div class="d-flex justify-content-between align-items-center mb-3 sticky-header">
                <h3 class="mb-0">Clientes</h3>
                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalCrearCliente">
                    <i class="fas fa-plus"></i> Crear Cliente
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th scope="col">Código</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">NIT</th>
                            <th scope="col">Rol</th>
                            <th scope="col">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyClientes">
                        <tr><td colspan="5" class="text-center">Cargando clientes...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Columna Cuentas -->
        <div class="col-md-6 column-divider">
            <div class="d-flex justify-content-between align-items-center mb-3 sticky-header">
                <h3 class="mb-0">Cuentas <span id="spanClienteActual" class="fs-5 text-muted"></span></h3>
                <button type="button" class="btn btn-success btn-sm" id="btnAbrirModalCuenta" data-bs-toggle="modal" data-bs-target="#modalCrearCuenta">
                    <i class="fas fa-plus"></i> Crear Cuenta
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th scope="col"># Cuenta</th>
                            <th scope="col">Saldo</th>
                            <th scope="col">Código Cliente</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyCuentas">
                        <tr><td colspan="3" class="text-center">Seleccione un cliente para ver sus cuentas.</td></tr>
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

<!-- Modal Crear Cliente -->
<div class="modal fade" id="modalCrearCliente" tabindex="-1" aria-labelledby="modalCrearClienteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="formCrearCliente">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCrearClienteLabel">Crear Nuevo Cliente</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="cod_cliente" class="form-label">Código Cliente</label>
                        @Html.TextBox("cod_cliente", null, new { @class = "form-control", id = "txtCodClienteModal" })
                    </div>
                    <div class="mb-3">
                        <label for="nombre_cliente" class="form-label">Nombre Cliente</label>
                        @Html.TextBox("nombre_cliente", null, new { @class = "form-control", id = "txtNombreClienteModal" })
                    </div>
                    <div class="mb-3">
                        <label for="nit" class="form-label">NIT</label>
                        @Html.TextBox("nit", null, new { @class = "form-control", id = "txtNitModal" })
                    </div>
                    <div class="mb-3">
                        <label for="rol" class="form-label">Rol</label>
                        @* @Html.TextBox("rol", null, new { @class = "form-control", id = "txtRolModal", placeholder = "Ej: cliente, administrador" }) *@
                        @Html.DropDownList("rol", new SelectList(new[]{"cliente", "administrador"}), "Seleccione un rol", new { @class="form-control"}) 
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-primary">Guardar Cliente</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Crear Cuenta -->
<div class="modal fade" id="modalCrearCuenta" tabindex="-1" aria-labelledby="modalCrearCuentaLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="formCrearCuenta">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCrearCuentaLabel">Crear Nueva Cuenta</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="cod_cliente_display" class="form-label">Cliente (Código)</label>
                        @* Usamos un campo de texto deshabilitado para mostrar el código y un hidden para enviarlo *@
                        <input type="text" id="modal_cod_cliente_display" class="form-control" disabled />
                        @Html.Hidden("cod_cliente", null, new { id = "modal_cod_cliente_hidden" })
                    </div>
                    <div class="mb-3">
                        <label for="ncta" class="form-label">Número de Cuenta</label>
                        @Html.TextBox("ncta", null, new { @class = "form-control", id = "txtNctaModal", type = "number" })
                    </div>
                    <div class="mb-3">
                        <label for="saldo" class="form-label">Saldo Inicial</label>
                        @Html.TextBox("saldo", null, new { @class = "form-control", id = "txtSaldoModal", type = "number", step = "0.01", value = "0" })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-success">Guardar Cuenta</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // Variable global para saber qué cliente está seleccionado
        let clienteActualId = null;
        let clienteActualNombre = ''; // Guardar nombre para mostrarlo

        // Función para cargar la tabla de clientes
        function cargarClientes() {
            const tbody = $('#tbodyClientes');
            tbody.html('<tr><td colspan="5" class="text-center"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Cargando...</td></tr>');

            $.ajax({
                url: '@Url.Action("GetClientes", "Admin")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    tbody.empty();
                    if (data && data.resultado && data.resultado.length > 0) {
                        $.each(data.resultado, function (index, cliente) {
                            let fila = `<tr>
                                <td>${cliente.cod_cliente}</td>
                                <td>${cliente.nombre_cliente}</td>
                                <td>${cliente.nit || '-'}</td>
                                <td>${cliente.rol}</td>
                                <td class="table-actions">
                                    <button class="btn btn-info btn-sm btnVerCuentas" data-codcliente="${cliente.cod_cliente}" data-nombrecliente="${cliente.nombre_cliente}" title="Ver Cuentas">
                                       <i class="fas fa-list"></i> Ver Cuentas
                                    </button>
                                </td>
                            </tr>`;
                            tbody.append(fila);
                        });

                        // Cargar cuentas del primer cliente POR DEFECTO si no hay uno seleccionado
                        if (clienteActualId === null) {
                            let primerCliente = data.resultado[0];
                            cargarCuentas(primerCliente.cod_cliente, primerCliente.nombre_cliente);
                        }

                    } else {
                        tbody.html('<tr><td colspan="5" class="text-center">No se encontraron clientes.</td></tr>');
                         // Si no hay clientes, limpiar tabla de cuentas también
                        limpiarTablaCuentas();
                        clienteActualId = null;
                        clienteActualNombre = '';
                        actualizarTituloCuentas();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error al cargar clientes:", textStatus, errorThrown);
                    tbody.html('<tr><td colspan="5" class="text-center text-danger">Error al cargar los clientes.</td></tr>');
                    limpiarTablaCuentas(); // Limpiar cuentas si falla carga de clientes
                }
            });
        }

        // Función para cargar la tabla de cuentas de un cliente específico
        function cargarCuentas(codCliente, nombreCliente) {
            clienteActualId = codCliente;
            clienteActualNombre = nombreCliente; // Guarda el nombre
            actualizarTituloCuentas(); // Actualiza el H3

            const tbody = $('#tbodyCuentas');
             tbody.html('<tr><td colspan="3" class="text-center"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Cargando cuentas...</td></tr>');

            $.ajax({
                url: '@Url.Action("GetCuenta", "Admin")',
                type: 'GET',
                dataType: 'json',
                data: { cod_cliente: codCliente }, // Pasar el código del cliente
                success: function (data) {
                    tbody.empty();
                    if (data && data.resultado && data.resultado.length > 0) {
                         $.each(data.resultado, function (index, cuenta) {
                             let saldoFormateado = cuenta.saldo ? parseFloat(cuenta.saldo).toFixed(2) : '0.00';
                             let fila = `<tr>
                                <td>${cuenta.ncta}</td>
                                <td>${saldoFormateado}</td>
                                <td>${cuenta.cod_cliente}</td>
                             </tr>`;
                             tbody.append(fila);
                         });
                    } else {
                         tbody.html('<tr><td colspan="3" class="text-center">Este cliente no tiene cuentas registradas.</td></tr>');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error al cargar cuentas:", textStatus, errorThrown);
                    tbody.html('<tr><td colspan="3" class="text-center text-danger">Error al cargar las cuentas.</td></tr>');
                }
            });
        }

        // Funcion para limpiar tabla cuentas y resetear titulo
        function limpiarTablaCuentas() {
             $('#tbodyCuentas').html('<tr><td colspan="3" class="text-center">Seleccione un cliente para ver sus cuentas.</td></tr>');
             clienteActualId = null;
             clienteActualNombre = '';
             actualizarTituloCuentas();
        }

        // Funcion para actualizar el título de la sección de cuentas
        function actualizarTituloCuentas() {
             if(clienteActualId) {
                 $('#spanClienteActual').text(`- ${clienteActualNombre} (ID: ${clienteActualId})`);
             } else {
                  $('#spanClienteActual').text('');
             }
        }


        $(document).ready(function () {

            // Carga inicial de clientes
            cargarClientes();

            // Evento para botones "Ver Cuentas" (usando eventos)
            $('#tbodyClientes').on('click', '.btnVerCuentas', function () {
                let codigo = $(this).data('codcliente');
                let nombre = $(this).data('nombrecliente');
                cargarCuentas(codigo, nombre);
            });

            // Evento para el envío del formulario Crear Cliente
            $('#formCrearCliente').on('submit', function (e) {
                e.preventDefault();
                let formData = $(this).serialize();
                console.log("Datos enviados para CrearCliente:", formData);

                $.ajax({
                    url: '@Url.Action("CrearCliente", "Admin")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        alert(response);
                        $('#modalCrearCliente').modal('hide');
                        cargarClientes();
                    },
                    error: function (textStatus, errorThrown) {
                        console.error("Error al crear cliente:", textStatus, errorThrown);
                        alert("Error al intentar crear el cliente.");
                    }
                });
            });

             // Evento para el envío del formulario Crear Cuenta
            $('#formCrearCuenta').on('submit', function (e) {
                e.preventDefault();
                // Asegurarse de que el cod_cliente hidden tiene valor antes de enviar
                 $('#modal_cod_cliente_hidden').val(clienteActualId);
                 let formData = $(this).serialize();

                $.ajax({
                    url: '@Url.Action("CrearCuenta", "Admin")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                         alert(response);
                         $('#modalCrearCuenta').modal('hide');
                         if(clienteActualId){
                            cargarCuentas(clienteActualId, clienteActualNombre);
                         }
                    },
                    error: function (textStatus, errorThrown) {
                         console.error("Error al crear cuenta:", textStatus, errorThrown);
                         alert("Error al intentar crear la cuenta.");
                    }
                });
            });


            // Lógica para el modal Crear Cuenta: Pre-llenar y validar selección
            $('#modalCrearCuenta').on('show.bs.modal', function (event) {
                if (!clienteActualId) {
                    alert('Por favor, seleccione un cliente de la lista antes de crear una cuenta.');
                    event.preventDefault(); // Detiene la apertura del modal
                    return false;
                }
                 // Llenar campos en el modal ANTES de que se muestre
                 $('#modal_cod_cliente_display').val(clienteActualId + ' - ' + clienteActualNombre); // Muestra ID y Nombre
                 $('#modal_cod_cliente_hidden').val(clienteActualId); // Pone el ID en el campo oculto
                 // Limpiar otros campos del formulario (opcional, pero bueno)
                 $('#txtNctaModal').val('');
                 $('#txtSaldoModal').val('0'); // Valor por defecto
            });

            $('#modalCrearCliente').on('shown.bs.modal', function () {
                 $('#formCrearCliente')[0].reset();
             });

        });

    </script>
}